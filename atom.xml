<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>bLanK&#39;s blog</title>
  
  <subtitle>攻无不克，战无不胜</subtitle>
  <link href="https://blank-null.github.io/atom.xml" rel="self"/>
  
  <link href="https://blank-null.github.io/"/>
  <updated>2024-06-22T06:42:18.259Z</updated>
  <id>https://blank-null.github.io/</id>
  
  <author>
    <name>bLank-L</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Websocket详解</title>
    <link href="https://blank-null.github.io/2024/06/22/Websocket%E8%AF%A6%E8%A7%A3/"/>
    <id>https://blank-null.github.io/2024/06/22/Websocket%E8%AF%A6%E8%A7%A3/</id>
    <published>2024-06-22T03:45:07.000Z</published>
    <updated>2024-06-22T06:42:18.259Z</updated>
    
    
    <summary type="html">&lt;p&gt;更新中—&lt;/p&gt;</summary>
    
    
    
    
    <category term="websocket" scheme="https://blank-null.github.io/tags/websocket/"/>
    
    <category term="网络" scheme="https://blank-null.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>vue2和vue3都重写了数组方法</title>
    <link href="https://blank-null.github.io/2024/06/13/vue2%E5%92%8Cvue3%E9%83%BD%E9%87%8D%E5%86%99%E4%BA%86%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"/>
    <id>https://blank-null.github.io/2024/06/13/vue2%E5%92%8Cvue3%E9%83%BD%E9%87%8D%E5%86%99%E4%BA%86%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/</id>
    <published>2024-06-13T13:09:22.000Z</published>
    <updated>2024-06-13T13:10:07.874Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;vue2和vue3都重写了数组方法&quot;&gt;&lt;a href=&quot;#vue2和vue3都重写了数组方法&quot; class=&quot;headerlink&quot; title=&quot;vue2和vue3都重写了数组方法&quot;&gt;&lt;/a&gt;vue2和vue3都重写了数组方法&lt;/h1&gt;&lt;h2 id=&quot;vue2的defineProperty&quot;&gt;&lt;a href=&quot;#vue2的defineProperty&quot; class=&quot;headerlink&quot; title=&quot;vue2的defineProperty&quot;&gt;&lt;/a&gt;vue2的defineProperty&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;defineReactive&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;obj, key&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; _val = obj[key];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;defineProperty&lt;/span&gt;(obj, key, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;get&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;title function_&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;newVal&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;set&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _val = newVal;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;defineProperty利用闭包， 对_val进行set和get，称为数据劫持。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;defineProperty的缺陷&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由此可见defineProperty的响应式粒度是key级别的。也就是说，已知的属性才有办法劫持其getter和setter，所以其根本没有办法对&lt;strong&gt;未知的key&lt;/strong&gt;劫持做响应。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么vue2不对数组进行劫持？而是重写数组方法？&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blank-null.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="vue" scheme="https://blank-null.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>React学习笔记</title>
    <link href="https://blank-null.github.io/2024/05/29/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://blank-null.github.io/2024/05/29/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-05-29T07:00:04.000Z</published>
    <updated>2024-06-13T13:12:41.056Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;jsx-本质&quot;&gt;&lt;a href=&quot;#jsx-本质&quot; class=&quot;headerlink&quot; title=&quot;jsx 本质&quot;&gt;&lt;/a&gt;jsx 本质&lt;/h2&gt;&lt;p&gt;再js里写html &amp;#x3D;&amp;gt;  编译为 ReactDom对象，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用React.creatElement() 同样可以创建ReactDom对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;jsx里的模板解析&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String, Number: 直接渲染&lt;/li&gt;
&lt;li&gt;Boolean: 不渲染&lt;/li&gt;
&lt;li&gt;null， undefined， function： 不渲染&lt;/li&gt;
&lt;li&gt;Object：只能渲染&lt;strong&gt;ReactDom&lt;/strong&gt; 对象&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Array&lt;/strong&gt;: &lt;strong&gt;每一项&lt;/strong&gt;都单独渲染&lt;/li&gt;
&lt;li&gt;表达式： 会运行&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blank-null.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="react" scheme="https://blank-null.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>【综合】工程化</title>
    <link href="https://blank-null.github.io/2024/05/10/%E3%80%90%E7%BB%BC%E5%90%88%E3%80%91%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    <id>https://blank-null.github.io/2024/05/10/%E3%80%90%E7%BB%BC%E5%90%88%E3%80%91%E5%B7%A5%E7%A8%8B%E5%8C%96/</id>
    <published>2024-05-10T08:31:54.000Z</published>
    <updated>2024-05-17T08:06:51.563Z</updated>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;包管理&quot;&gt;&lt;a href=&quot;#包管理&quot; class=&quot;headerlink&quot; title=&quot;包管理&quot;&gt;&lt;/a&gt;包管理&lt;/h1&gt;&lt;h2 id=&quot;npm&quot;&gt;&lt;a href=&quot;#npm&quot; class=&quot;headerlink&quot; title=&quot;npm&quot;&gt;&lt;/a&gt;npm&lt;/h</summary>
      
    
    
    
    <category term="综合" scheme="https://blank-null.github.io/categories/%E7%BB%BC%E5%90%88/"/>
    
    
    <category term="工程化" scheme="https://blank-null.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>回流重绘</title>
    <link href="https://blank-null.github.io/2024/04/27/%E5%9B%9E%E6%B5%81%E9%87%8D%E7%BB%98/"/>
    <id>https://blank-null.github.io/2024/04/27/%E5%9B%9E%E6%B5%81%E9%87%8D%E7%BB%98/</id>
    <published>2024-04-27T06:04:08.000Z</published>
    <updated>2024-04-27T07:54:48.422Z</updated>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是回流重绘&quot;&gt;&lt;a href=&quot;#什么是回流重绘&quot; class=&quot;headerlink&quot; title=&quot;什么是回流重绘&quot;&gt;&lt;/a&gt;什么是回流重绘&lt;/h1&gt;&lt;p&gt;HTML中每个元素都可视为一个盒子，在浏览器解析时&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;回流&lt;</summary>
      
    
    
    
    <category term="浏览器" scheme="https://blank-null.github.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
    <category term="回流重绘" scheme="https://blank-null.github.io/tags/%E5%9B%9E%E6%B5%81%E9%87%8D%E7%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>HTTPS详解</title>
    <link href="https://blank-null.github.io/2024/04/21/HTTPS%E8%AF%A6%E8%A7%A3/"/>
    <id>https://blank-null.github.io/2024/04/21/HTTPS%E8%AF%A6%E8%A7%A3/</id>
    <published>2024-04-21T15:35:00.000Z</published>
    <updated>2024-04-21T16:09:29.814Z</updated>
    
    
    <summary type="html">&lt;p&gt;HTTPS &amp;#x3D; HTTP + SSL&amp;#x2F;TLS&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;http 明文传输，易被劫持，SEO降权&lt;/li&gt;
&lt;li&gt;TLS 传输层安全协议，是SSL的升级方案&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="网络" scheme="https://blank-null.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="http" scheme="https://blank-null.github.io/tags/http/"/>
    
    <category term="https" scheme="https://blank-null.github.io/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>Webpack与Vite的区别与联系</title>
    <link href="https://blank-null.github.io/2024/04/21/Webpack%E4%B8%8EVite%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E8%81%94%E7%B3%BB/"/>
    <id>https://blank-null.github.io/2024/04/21/Webpack%E4%B8%8EVite%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E8%81%94%E7%B3%BB/</id>
    <published>2024-04-21T07:25:17.000Z</published>
    <updated>2024-04-30T06:41:38.579Z</updated>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0-当前工程化痛点&quot;&gt;&lt;a href=&quot;#0-当前工程化痛点&quot; class=&quot;headerlink&quot; title=&quot;0. 当前工程化痛点&quot;&gt;&lt;/a&gt;0. 当前工程化痛点&lt;/h1&gt;&lt;p&gt;主流webpack需要把&lt;i&gt;整个项目编译好后&lt;/i&gt;再交给dev server</summary>
      
    
    
    
    <category term="工程化" scheme="https://blank-null.github.io/categories/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    
    <category term="webpack" scheme="https://blank-null.github.io/tags/webpack/"/>
    
    <category term="vite" scheme="https://blank-null.github.io/tags/vite/"/>
    
  </entry>
  
  <entry>
    <title>算法总结</title>
    <link href="https://blank-null.github.io/2024/03/31/%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://blank-null.github.io/2024/03/31/%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</id>
    <published>2024-03-31T09:52:01.000Z</published>
    <updated>2024-04-24T04:51:40.604Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;思想&quot;&gt;&lt;a href=&quot;#思想&quot; class=&quot;headerlink&quot; title=&quot;思想&quot;&gt;&lt;/a&gt;思想&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;大部分算法可以看作对于二叉树的操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;二叉树解题的思维模式分两类：&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;1、是否可以通过遍历一遍二叉树得到答案&lt;/strong&gt; ？如果可以，用一个 &lt;code&gt;traverse&lt;/code&gt; 函数配合外部变量来实现，这叫「遍历」的思维模式。&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;2、是否可以定义一个递归函数，通过子问题（子树）的答案推导出原问题的答案&lt;/strong&gt; ？如果可以，写出这个递归函数的定义，并充分利用这个函数的返回值，这叫「分解问题」的思维模式。&lt;/p&gt;
&lt;p&gt;无论使用哪种思维模式，你都需要思考：&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;如果单独抽出一个二叉树节点，它需要做什么事情？需要在什么时候（前&amp;#x2F;中&amp;#x2F;后序位置）做&lt;/strong&gt; ？其他的节点不用你操心，递归函数会帮你在所有节点上执行相同的操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比如快排是二叉树前序遍历&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;[] nums, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; lo, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; hi)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/****** 前序遍历位置 ******/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 通过交换元素构建分界点 p&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; partition(nums, lo, hi);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/************************/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sort(nums, lo, p - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sort(nums, p + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, hi);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;归并排序是二叉树后序遍历&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;[] nums, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; lo, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; hi)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; (lo + hi) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 排序 nums[lo..mid]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sort(nums, lo, mid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 排序 nums[mid+1..hi]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sort(nums, mid + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, hi);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/****** 后序位置 ******/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 合并 nums[lo..mid] 和 nums[mid+1..hi]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    merge(nums, lo, mid, hi);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*********************/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;前中后序是遍历二叉树过程中处理每一个节点的三个特殊时间点&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;前序位置的代码在刚刚进入一个二叉树节点的时候执行；&lt;/li&gt;
&lt;li&gt;后序位置的代码在将要离开一个二叉树节点的时候执行；&lt;/li&gt;
&lt;li&gt;中序位置的代码在一个二叉树节点左子树都遍历完，即将开始遍历右子树的时候执行。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="算法" scheme="https://blank-null.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://blank-null.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>生成器实现异步</title>
    <link href="https://blank-null.github.io/2024/03/26/%E7%94%9F%E6%88%90%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5/"/>
    <id>https://blank-null.github.io/2024/03/26/%E7%94%9F%E6%88%90%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5/</id>
    <published>2024-03-26T04:01:20.000Z</published>
    <updated>2024-04-06T04:50:09.187Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;js中实现异步有三大方式: &lt;code&gt;回调&lt;/code&gt; &lt;code&gt;Promise&lt;/code&gt; &lt;code&gt;generator&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;回调&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优势：简单、语义清晰&lt;/li&gt;
&lt;li&gt;劣势：回调地狱&lt;/li</summary>
      
    
    
    
    <category term="技术" scheme="https://blank-null.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="generator" scheme="https://blank-null.github.io/tags/generator/"/>
    
  </entry>
  
  <entry>
    <title>浅尝Web Worker</title>
    <link href="https://blank-null.github.io/2024/03/21/%E6%B5%85%E5%B0%9DWeb-Worker/"/>
    <id>https://blank-null.github.io/2024/03/21/%E6%B5%85%E5%B0%9DWeb-Worker/</id>
    <published>2024-03-21T12:03:49.000Z</published>
    <updated>2024-04-05T06:57:57.420Z</updated>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Worker&quot;&gt;&lt;a href=&quot;#Worker&quot; class=&quot;headerlink&quot; title=&quot;Worker&quot;&gt;&lt;/a&gt;Worker&lt;/h1&gt;&lt;p&gt;创建一个worker对象，可以在浏览器中创建一个新线程不阻塞UI线程渲染。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;必须遵</summary>
      
    
    
    
    <category term="技术" scheme="https://blank-null.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="webWorker" scheme="https://blank-null.github.io/tags/webWorker/"/>
    
  </entry>
  
  <entry>
    <title>前端性能优化</title>
    <link href="https://blank-null.github.io/2024/03/06/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>https://blank-null.github.io/2024/03/06/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</id>
    <published>2024-03-06T09:58:04.000Z</published>
    <updated>2024-04-05T16:05:32.681Z</updated>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h1 id=&quot;首屏速度&quot;&gt;&lt;a href=&quot;#首屏速度&quot; class=&quot;headerlink&quot; title=&quot;首屏速度&quot;&gt;&lt;/a&gt;首屏速度&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;源码上&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;</summary>
      
    
    
    
    
    <category term="性能" scheme="https://blank-null.github.io/tags/%E6%80%A7%E8%83%BD/"/>
    
    <category term="优化" scheme="https://blank-null.github.io/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>【综合】服务端基础</title>
    <link href="https://blank-null.github.io/2024/03/05/%E3%80%90%E7%BB%BC%E5%90%88%E3%80%91%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    <id>https://blank-null.github.io/2024/03/05/%E3%80%90%E7%BB%BC%E5%90%88%E3%80%91%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%9F%BA%E7%A1%80/</id>
    <published>2024-03-05T07:00:30.000Z</published>
    <updated>2024-05-10T09:10:51.435Z</updated>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h1 id=&quot;1-http-状态码&quot;&gt;&lt;a href=&quot;#1-http-状态码&quot; class=&quot;headerlink&quot; title=&quot;1. http 状态码&quot;&gt;&lt;/a&gt;1. http 状态码&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;1XX  </summary>
      
    
    
    
    <category term="综合" scheme="https://blank-null.github.io/categories/%E7%BB%BC%E5%90%88/"/>
    
    
    <category term="网络" scheme="https://blank-null.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="服务器" scheme="https://blank-null.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="服务端" scheme="https://blank-null.github.io/tags/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>【综合】html+css基础</title>
    <link href="https://blank-null.github.io/2024/03/05/%E3%80%90%E7%BB%BC%E5%90%88%E3%80%91html-css%E5%9F%BA%E7%A1%80/"/>
    <id>https://blank-null.github.io/2024/03/05/%E3%80%90%E7%BB%BC%E5%90%88%E3%80%91html-css%E5%9F%BA%E7%A1%80/</id>
    <published>2024-03-05T06:08:24.000Z</published>
    <updated>2024-04-08T16:56:17.260Z</updated>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h1 id=&quot;1-行级元素和块级元素&quot;&gt;&lt;a href=&quot;#1-行级元素和块级元素&quot; class=&quot;headerlink&quot; title=&quot;1. 行级元素和块级元素&quot;&gt;&lt;/a&gt;1. 行级元素和块级元素&lt;/h1&gt;&lt;h2 id=&quot;行级</summary>
      
    
    
    
    <category term="综合" scheme="https://blank-null.github.io/categories/%E7%BB%BC%E5%90%88/"/>
    
    
    <category term="css" scheme="https://blank-null.github.io/tags/css/"/>
    
    <category term="html" scheme="https://blank-null.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>【综合】js基础</title>
    <link href="https://blank-null.github.io/2024/03/04/%E3%80%90%E7%BB%BC%E5%90%88%E3%80%91js%E5%9F%BA%E7%A1%80/"/>
    <id>https://blank-null.github.io/2024/03/04/%E3%80%90%E7%BB%BC%E5%90%88%E3%80%91js%E5%9F%BA%E7%A1%80/</id>
    <published>2024-03-04T12:15:58.000Z</published>
    <updated>2024-04-21T07:16:31.998Z</updated>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h1 id=&quot;1-隐式类型转换&quot;&gt;&lt;a href=&quot;#1-隐式类型转换&quot; class=&quot;headerlink&quot; title=&quot;1. 隐式类型转换&quot;&gt;&lt;/a&gt;1. 隐式类型转换&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2024/03/</summary>
      
    
    
    
    <category term="综合" scheme="https://blank-null.github.io/categories/%E7%BB%BC%E5%90%88/"/>
    
    
    <category term="js" scheme="https://blank-null.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>vue3的性能提升</title>
    <link href="https://blank-null.github.io/2024/03/04/vue3%E7%9A%84%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87/"/>
    <id>https://blank-null.github.io/2024/03/04/vue3%E7%9A%84%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87/</id>
    <published>2024-03-04T11:48:43.000Z</published>
    <updated>2024-05-10T09:32:46.423Z</updated>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h1 id=&quot;1-diff-算法的优化&quot;&gt;&lt;a href=&quot;#1-diff-算法的优化&quot; class=&quot;headerlink&quot; title=&quot;1. diff 算法的优化&quot;&gt;&lt;/a&gt;1. diff 算法的优化&lt;/h1&gt;&lt;p&gt;增加了</summary>
      
    
    
    
    <category term="技术" scheme="https://blank-null.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="vue" scheme="https://blank-null.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>深入理解BFC</title>
    <link href="https://blank-null.github.io/2024/03/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3BFC/"/>
    <id>https://blank-null.github.io/2024/03/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3BFC/</id>
    <published>2024-03-02T06:59:36.000Z</published>
    <updated>2024-03-02T13:27:45.183Z</updated>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;普通流&quot;&gt;&lt;a href=&quot;#普通流&quot; class=&quot;headerlink&quot; title=&quot;普通流&quot;&gt;&lt;/a&gt;普通流&lt;/h1&gt;&lt;h2 id=&quot;BFC&quot;&gt;&lt;a href=&quot;#BFC&quot; class=&quot;headerlink&quot; title=&quot;BFC&quot;&gt;&lt;/a&gt;BFC&lt;/h</summary>
      
    
    
    
    
    <category term="BFC" scheme="https://blank-null.github.io/tags/BFC/"/>
    
    <category term="CSS" scheme="https://blank-null.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>v-model</title>
    <link href="https://blank-null.github.io/2024/02/11/v-model/"/>
    <id>https://blank-null.github.io/2024/02/11/v-model/</id>
    <published>2024-02-11T15:24:44.000Z</published>
    <updated>2024-02-11T17:21:20.872Z</updated>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;在原生上实现v-model效果&quot;&gt;&lt;a href=&quot;#在原生上实现v-model效果&quot; class=&quot;headerlink&quot; title=&quot;在原生上实现v-model效果&quot;&gt;&lt;/a&gt;在原生上实现v-model效果&lt;/h2&gt;&lt;figure class=&quot;highli</summary>
      
    
    
    
    <category term="技术" scheme="https://blank-null.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="vue" scheme="https://blank-null.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>nextTick原理与作用</title>
    <link href="https://blank-null.github.io/2023/12/24/nextTick%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%9C%E7%94%A8/"/>
    <id>https://blank-null.github.io/2023/12/24/nextTick%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%9C%E7%94%A8/</id>
    <published>2023-12-24T08:27:17.000Z</published>
    <updated>2023-12-24T09:15:36.846Z</updated>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;nextTick-作用&quot;&gt;&lt;a href=&quot;#nextTick-作用&quot; class=&quot;headerlink&quot; title=&quot;nextTick 作用&quot;&gt;&lt;/a&gt;nextTick 作用&lt;/h1&gt;&lt;p&gt;在一轮里，对一个数据进行多次修改时，不会每次都渲染而是一轮结束时渲染</summary>
      
    
    
    
    <category term="vue" scheme="https://blank-null.github.io/categories/vue/"/>
    
    
    <category term="nextTick" scheme="https://blank-null.github.io/tags/nextTick/"/>
    
  </entry>
  
  <entry>
    <title>几种postMessage</title>
    <link href="https://blank-null.github.io/2023/12/24/%E5%87%A0%E7%A7%8DpostMessage/"/>
    <id>https://blank-null.github.io/2023/12/24/%E5%87%A0%E7%A7%8DpostMessage/</id>
    <published>2023-12-23T17:02:59.000Z</published>
    <updated>2023-12-23T19:22:32.016Z</updated>
    
    
    <summary type="html">&lt;p&gt;在初见postMessage的时候被其强大的功能震撼到了，可是自己用起来却总是莫名报错&lt;/p&gt;
&lt;p&gt;原来是我把几种postMessage搞混了，现在来和我一起捋清楚吧&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blank-null.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="postMessage" scheme="https://blank-null.github.io/tags/postMessage/"/>
    
  </entry>
  
  <entry>
    <title>跨标签通信</title>
    <link href="https://blank-null.github.io/2023/12/22/%E8%B7%A8%E6%A0%87%E7%AD%BE%E9%80%9A%E4%BF%A1/"/>
    <id>https://blank-null.github.io/2023/12/22/%E8%B7%A8%E6%A0%87%E7%AD%BE%E9%80%9A%E4%BF%A1/</id>
    <published>2023-12-22T11:15:34.000Z</published>
    <updated>2024-06-14T16:44:02.413Z</updated>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;本地存储监听&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;监听 &lt;strong&gt;同源&lt;/strong&gt; localStorage 的修改 （如果setItem 的值没变，则不会触发storage事件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure clas</summary>
      
    
    
    
    <category term="技术" scheme="https://blank-null.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="标签" scheme="https://blank-null.github.io/tags/%E6%A0%87%E7%AD%BE/"/>
    
    <category term="通信" scheme="https://blank-null.github.io/tags/%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
</feed>
